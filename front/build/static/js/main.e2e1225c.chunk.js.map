{"version":3,"sources":["services/services.ts","services/storage.ts","services/template.ts","services/project.ts","services/registration.ts","utils/extensions.ts","model/stacks.ts","components/template/template-panel.tsx","services/repository.ts","services/build.ts","model/project.ts","components/project/project-panel.tsx","pages/project/projectsTable.tsx","pages/project/projects-page.tsx","app.tsx","pages/radar/radar.tsx","index.tsx"],"names":["Services","services","servicesInstances","id","service","this","Error","getStorageManager","a","DevOps","context","getExtensionContext","getService","extensionDataService","getAccessToken","accessToken","getExtensionDataManager","TemplateServiceId","TemplateService","manager","getManager","_getCollection","defaultValue","getDocuments","template","console","log","setDocument","deleteDocument","templateCollection","projectPageService","getProject","projectInfo","ProjectServiceId","ProjectService","project","projectCollection","registerService","Array","prototype","sortByProp","prop","sort","n1","n2","toLowerCase","Object","deepcopy","copy","_self","Date","setTime","getTime","i","len","length","attr","hasOwnProperty","StackValues","text","TestImages","choiceGroupBarUnselected","choiceGroupBarSelected","TemplatePanel","props","selection","ListSelection","renderRow","index","item","details","key","List","className","style","marginLeft","padding","description","gitUrl","PillGroup","tags","map","tag","Pill","size","PillSize","compact","state","showAuthentication","currentTemplate","getStartValue","tagSuggestions","getTemplate","then","items","setState","replaceKey","user","pass","event","value","that","target","replace","trim","show","Panel","onDismiss","titleProps","footerButtonProps","onClick","TextField","inputId","onChange","onInputChange","placeholder","required","multiline","rows","Icon","ariaLabel","iconName","tooltipProps","anchorOffset","horizontal","vertical","fixedLayout","showOnFocus","tooltipOrigin","Location","start","TagPicker","noResultsFoundText","areTagsEqual","b","convertItemToPill","content","onSearchChanged","searchValue","filter","findIndex","d","testItem","indexOf","onTagAdded","push","onTagRemoved","x","renderSuggestionItem","selectedTags","suggestions","suggestionsLoading","Toggle","checked","inputType","Button","primary","disabled","isValid","Guid","create","toString","saveTemplate","ButtonGroup","subtle","clear","danger","removeTemplate","Card","display","Observer","itemProvider","ObservableValue","ArrayItemProvider","observableProps","width","onSelect","listRow","data","React","Component","client","getClient","GitRestClient","CreateRepositoryAsync","name","projectService","currentProject","options","createRepository","repository","gitRefUpdate","oldObjectId","path","itemContent","contentType","ItemContentType","RawText","change","changeType","VersionControlChangeType","Add","newContent","gitCommitRef","comment","changes","refUpdates","commits","createPush","BuildRestClient","CreateBuildDefinitionAsync","type","repositoryId","defaultBranch","agent","identifier","agentSpecification","phaseTarget","allowScriptsAuthAccessOption","task","versionSpec","definitionType","step","displayName","enabled","inputs","sourceRepository","phase","refName","condition","jobAuthorizationScope","steps","designerProcess","phases","taskAgentPoolReference","isHosted","agentPoolQueue","pool","definition","toUpperCase","DefinitionType","Build","process","queue","PAT","isSecret","userName","variables","UserName","createDefinition","ProjectStatus","ProjectPanel","repoName","status","buildOptions","buildDef","repoUrl","webUrl","buildDefinitionId","startTime","saveProject","createNewProject","label","Dropdown","projectsMock","renderNameColumn","rowIndex","columnIndex","tableColumn","tableItem","contentClassName","Status","getStatusIndicator","statusProps","StatusSize","l","overflowOnly","ProjectsPage","templateService","columns","renderCell","readonly","sortProps","ariaLabelAscending","ariaLabelDescending","ColumnMore","projects","sortingBehavior","ColumnSorting","proposedSortOrder","sortItems","item1","item2","localeCompare","templateExpanded","projectExpanded","loadTemplate","loadProjects","Page","Header","titleSize","TitleSize","Large","iconProps","ZeroData","primaryText","secondaryText","imageAltText","imagePath","actionText","actionType","ZeroDataActionType","ctaButton","onActionClick","contentProps","contentPadding","Table","behaviors","containerClassName","showLines","onActivate","row","App","page","getPageRoute","route","routeValues","Surface","background","SurfaceBackground","neutral","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e2e1225c.chunk.js","sourcesContent":["export interface IService {}\n\nexport interface IServiceRegistry {\n    registerService(id: string, service: IService): void;\n    getService<TService extends IService>(id: string): TService;\n}\n\nclass ServiceRegistry implements IServiceRegistry {\n    private services: { [id: string]: new () => IService } = {};\n    private servicesInstances: { [id: string]: IService } = {};\n\n    public registerService(id: string, service: new () => IService): void {\n        this.services[id] = service;\n    }\n\n    public getService<TService extends IService>(id: string): TService {\n        if (!this.servicesInstances[id]) {\n            if (!this.services[id]) {\n                throw new Error(`Can't find service with id ${id}`);\n            }\n\n            this.servicesInstances[id] = new this.services[id]();\n        }\n\n        return this.servicesInstances[id] as TService;\n    }\n}\n\nexport const Services: IServiceRegistry = new ServiceRegistry();\n","import {\n    IExtensionDataManager,\n    IExtensionDataService\n} from \"azure-devops-extension-api\";\nimport * as DevOps from \"azure-devops-extension-sdk\";\nimport {\n    getAccessToken,\n    getExtensionContext,\n    getService\n} from \"azure-devops-extension-sdk\";\n\nexport async function getStorageManager(): Promise<IExtensionDataManager> {\n    await DevOps.ready();\n    const context = getExtensionContext();\n    const extensionDataService = await getService<IExtensionDataService>(\n        \"ms.vss-features.extension-data-service\"\n    );\n    const accessToken = await getAccessToken();\n    return extensionDataService.getExtensionDataManager(\n        context.id,\n        accessToken\n    );\n}\n","import * as DevOps from \"azure-devops-extension-sdk\";\nimport {\n    IExtensionDataManager,\n    IProjectPageService\n} from \"azure-devops-extension-api\";\n\nimport {\n    ITemplate,\n} from \"../model/template\";\n\nimport { getStorageManager } from \"./storage\";\nimport { IService } from \"./services\";\n\nexport interface ITemplateService extends IService {\n    getTemplate(): Promise<ITemplate[]>;\n    saveTemplate(template: ITemplate): Promise<ITemplate>;\n    removeTemplate(id: string): Promise<void>;\n}\n\nexport const TemplateServiceId = \"TemplateService\";\n\nexport class TemplateService implements ITemplateService {\n    manager: IExtensionDataManager | undefined;\n\n    constructor() {\n        this.getManager();\n    }\n\n    async getTemplate(): Promise<ITemplate[]> {\n        const manager = await this.getManager();\n\n        try {\n            return manager.getDocuments(await this._getCollection(), {\n                defaultValue: []\n            });\n        } catch {\n            return [];\n        }\n    }\n\n    async saveTemplate(template: ITemplate): Promise<ITemplate> {\n        console.log(template);\n        const manager = await this.getManager();\n        await manager.setDocument(await this._getCollection(), template);\n        return template;\n    }\n\n    async removeTemplate(id: string): Promise<void> {\n        const manager = await this.getManager();\n        try {\n            await manager.deleteDocument(await this._getCollection(), id);\n        } catch {\n            // Ignore\n        }\n    }\n\n    async getManager(): Promise<IExtensionDataManager> {\n        if (!this.manager) {\n            this.manager = await getStorageManager();\n        }\n        return this.manager;\n    }\n\n    async _getCollection(): Promise<string> {\n        const templateCollection = \"BaseTemplateCollections\";\n        const projectPageService = await DevOps.getService<IProjectPageService>(\n            \"ms.vss-tfs-web.tfs-page-data-service\"\n        );\n        const projectInfo = await projectPageService.getProject();\n        return `${templateCollection}-${projectInfo.id}`;\n    }\n}\n","import * as DevOps from \"azure-devops-extension-sdk\";\nimport {\n    IExtensionDataManager,\n    IProjectPageService\n} from \"azure-devops-extension-api\";\n\nimport {\n    IProject,\n} from \"../model/project\";\n\nimport { getStorageManager } from \"./storage\";\nimport { IService } from \"./services\";\n\nexport interface IProjectService extends IService {\n    getProject(): Promise<IProject[]>;\n    saveProject(project: IProject): Promise<IProject>;\n    removeProject(id: string): Promise<void>;\n}\n\nexport const ProjectServiceId = \"ProjectService\";\n\nexport class ProjectService implements IProjectService {\n    manager: IExtensionDataManager | undefined;\n\n    constructor() {\n        this.getManager();\n    }\n\n    async getProject(): Promise<IProject[]> {\n        const manager = await this.getManager();\n\n        try {\n            return manager.getDocuments(await this._getCollection(), {\n                defaultValue: []\n            });\n        } catch {\n            return [];\n        }\n    }\n\n    async saveProject(project: IProject): Promise<IProject> {\n        console.log(project);\n        const manager = await this.getManager();\n        await manager.setDocument(await this._getCollection(), project);\n        return project;\n    }\n\n    async removeProject(id: string): Promise<void> {\n        const manager = await this.getManager();\n        try {\n            await manager.deleteDocument(await this._getCollection(), id);\n        } catch {\n            // Ignore\n        }\n    }\n\n    async getManager(): Promise<IExtensionDataManager> {\n        if (!this.manager) {\n            this.manager = await getStorageManager();\n        }\n        return this.manager;\n    }\n\n    async _getCollection(): Promise<string> {\n        const projectCollection = \"BaseProjectCollections\";\n        const projectPageService = await DevOps.getService<IProjectPageService>(\n            \"ms.vss-tfs-web.tfs-page-data-service\"\n        );\n        const projectInfo = await projectPageService.getProject();\n        return `${projectCollection}-${projectInfo.id}`;\n    }\n}\n","import { Services } from \"./services\";\nimport { TemplateService, TemplateServiceId } from \"./template\";\nimport { ProjectService, ProjectServiceId } from \"./project\";\n\nServices.registerService(TemplateServiceId, TemplateService);\nServices.registerService(ProjectServiceId, ProjectService);\n","export { };\r\n\r\ndeclare global {\r\n    interface Array<T> {\r\n        sortByProp(prop: string): Array<T>;\r\n    }\r\n    interface Object {\r\n        deepcopy(): any;\r\n    }\r\n}\r\n\r\nArray.prototype.sortByProp = function (prop: string) {\r\n    var _self = this as Array<any>;\r\n    try {\r\n        return _self.sort((n1, n2) => {\r\n            if (n1[prop].toLowerCase() > n2[prop].toLowerCase()) { return 1; }\r\n            if (n1[prop].toLowerCase() < n2[prop].toLowerCase()) { return -1; } return 0;\r\n        })\r\n    }\r\n    catch\r\n    {\r\n        return _self;\r\n    }\r\n};\r\n\r\nObject.prototype.deepcopy = function (): any {\r\n    var _self = this;\r\n    var copy;\r\n\r\n    if (null == _self || \"object\" != typeof _self) return _self;\r\n\r\n    if (_self instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(_self.getTime());\r\n        return copy;\r\n    }\r\n\r\n    if (_self instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = _self.length; i < len; i++) {\r\n            copy[i] = _self[i].deepcopy();\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    if (_self instanceof Object) {\r\n        copy = {};\r\n        for (var attr in _self) {\r\n            if (_self.hasOwnProperty(attr)) copy[attr] = _self[attr].deepcopy();\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n};","import { TestImages } from \"@fluentui/example-data\";\r\nimport { IChoiceGroupOption } from \"@fluentui/react\";\r\n\r\nexport interface IStack {\r\n    id: number;\r\n    text: string;\r\n}\r\n\r\nexport const StackValues: IStack[] = [\r\n    {\r\n        id: 1,\r\n        text: \"C#\"\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"API\"\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"React\"\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"SQLServer\"\r\n    }\r\n];\r\n\r\nexport const DatabaseValues: IChoiceGroupOption[] = [\r\n    {\r\n        key: 'bar',\r\n        imageSrc: TestImages.choiceGroupBarUnselected,\r\n        imageAlt: 'Bar chart icon',\r\n        selectedImageSrc: TestImages.choiceGroupBarSelected,\r\n        imageSize: { width: 32, height: 32 },\r\n        text: 'MongoDB',\r\n    },\r\n    {\r\n        key: 'pie',\r\n        imageSrc: TestImages.choiceGroupBarUnselected,\r\n        selectedImageSrc: TestImages.choiceGroupBarSelected,\r\n        imageSize: { width: 32, height: 32 },\r\n        text: 'SQLServer',\r\n    },\r\n];","import React from 'react';\r\nimport './template-panel.scss';\r\n\r\nimport {\r\n  ScrollableList,\r\n  IListItemDetails,\r\n  ListSelection,\r\n  ListItem,\r\n  IListRow\r\n} from \"azure-devops-ui/List\";\r\n\r\nimport { Guid } from \"guid-typescript\";\r\nimport { Panel } from \"azure-devops-ui/Panel\";\r\nimport { TextField } from \"azure-devops-ui/TextField\";\r\nimport { Card } from 'azure-devops-ui/Card';\r\nimport { ArrayItemProvider } from \"azure-devops-ui/Utilities/Provider\";\r\n\r\nimport { Toggle } from \"azure-devops-ui/Toggle\";\r\nimport { Button } from \"azure-devops-ui/Button\";\r\n\r\nimport { Services } from \"../../services/services\";\r\nimport { ITemplate } from '../../model/template';\r\nimport { ITemplateService, TemplateServiceId } from \"../../services/template\";\r\nimport { Observer } from 'azure-devops-ui/Observer';\r\nimport { ObservableValue } from 'azure-devops-ui/Core/Observable';\r\nimport { ButtonGroup } from 'azure-devops-ui/ButtonGroup';\r\nimport { IStack, StackValues } from '../../model/stacks';\r\nimport { TagPicker } from \"azure-devops-ui/TagPicker\";\r\nimport { ISuggestionItemProps } from \"azure-devops-ui/SuggestionsList\";\r\nimport { PillGroup } from 'azure-devops-ui/PillGroup';\r\nimport { Pill, PillSize } from 'azure-devops-ui/Pill';\r\nimport { Icon } from 'azure-devops-ui/Icon';\r\nimport { Location } from \"azure-devops-ui/Utilities/Position\";\r\n\r\n\r\nexport interface ITemplatePanelProps {\r\n  show: boolean;\r\n  onDismiss: any;\r\n}\r\n\r\ninterface ITemplatePanelState {\r\n  showAuthentication: boolean;\r\n  currentTemplate?: ITemplate;\r\n  template: ITemplate[];\r\n  tagSuggestions: IStack[]\r\n}\r\n\r\nclass TemplatePanel extends React.Component<ITemplatePanelProps, ITemplatePanelState>  {\r\n\r\n  selection = new ListSelection(true);\r\n\r\n  service = Services.getService<ITemplateService>(\r\n    TemplateServiceId\r\n  );\r\n\r\n  constructor(props: ITemplatePanelProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showAuthentication: false,\r\n      currentTemplate: this.getStartValue(),\r\n      tagSuggestions: StackValues,\r\n      template: [],\r\n    };\r\n\r\n    this.service.getTemplate().then(items => {\r\n      this.setState({\r\n        template: items.sortByProp(\"text\")\r\n      });\r\n    });\r\n  }\r\n\r\n  getStartValue(): ITemplate {\r\n    return {\r\n      id: \"\",\r\n      replaceKey: \"\",\r\n      text: \"\",\r\n      description: \"\",\r\n      gitUrl: \"\",\r\n      user: \"\",\r\n      pass: \"\",\r\n      tags: []\r\n    };\r\n  }\r\n\r\n  onInputChange(event: React.ChangeEvent, value: string, that: this) {\r\n    var prop = event.target.id.replace(\"__bolt-\", \"\");\r\n    that.state.currentTemplate[prop] = value;\r\n\r\n    this.setState({currentTemplate: that.state.currentTemplate});\r\n  }\r\n\r\n  isValid(): boolean {\r\n    const { currentTemplate, showAuthentication } = this.state;\r\n\r\n    return (\r\n      !!currentTemplate.text        && currentTemplate.text.trim() !== \"\" &&\r\n      !!currentTemplate.description && currentTemplate.description.trim() !== \"\" &&\r\n      !!currentTemplate.gitUrl      && currentTemplate.gitUrl.trim() !== \"\" &&\r\n      !!currentTemplate.replaceKey  && currentTemplate.replaceKey.trim() !== \"\" &&\r\n      !!currentTemplate.tags        && currentTemplate.tags.length > 0 &&\r\n      (!showAuthentication ||\r\n        currentTemplate.pass && currentTemplate.pass.trim() !== \"\"\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n\r\n    const { showAuthentication, currentTemplate, template, tagSuggestions } = this.state;\r\n\r\n    if (this.props.show) {\r\n      return (\r\n        <Panel\r\n          onDismiss={this.props.onDismiss}\r\n          titleProps={{ text: \"Template catalog\" }}\r\n          description={\r\n            \"Base repository configuration for template generation.\"\r\n          }\r\n          footerButtonProps={[\r\n            { text: \"Close\", onClick: this.props.onDismiss }\r\n          ]}>\r\n\r\n          <div className=\"template--content\">\r\n            <div className=\"template--group\">\r\n              <label className=\"template--group-label\">\r\n                Template *\r\n              </label>\r\n              <TextField\r\n                inputId=\"text\"\r\n                value={currentTemplate.text}\r\n                onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                placeholder=\"Name your template\"\r\n              />\r\n            </div>\r\n            <div className=\"template--group\">\r\n              <TextField\r\n                inputId=\"description\"\r\n                value={currentTemplate.description}\r\n                onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                required={true}\r\n                multiline={true}\r\n                rows={4}\r\n                placeholder=\"Template description\"\r\n              />\r\n            </div>\r\n            <div className=\"template--group\">\r\n              <label className=\"template--group-label\">\r\n                Source repository *\r\n              </label>\r\n              <TextField\r\n                inputId=\"gitUrl\"\r\n                value={currentTemplate.gitUrl}\r\n                onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                required={true}\r\n                placeholder=\"e.g. https://github.com/Microsoft/vscode.git\"\r\n              />\r\n            </div>\r\n            <div className=\"template--group\">\r\n              <label className=\"template--group-label\">\r\n                Replace key *    <Icon ariaLabel=\"Replace key info\" iconName=\"Info\"\r\n                  tooltipProps={{\r\n                    anchorOffset: { horizontal: 8, vertical: 8 },\r\n                    fixedLayout: false,\r\n                    showOnFocus: true,\r\n                    text:\r\n                      \"This tooltip is designed to overflow to the bottom right\",\r\n                    tooltipOrigin: {\r\n                      horizontal: Location.start,\r\n                      vertical: Location.start\r\n                    }\r\n                  }} />\r\n              </label>\r\n              <TextField\r\n                inputId=\"replaceKey\"\r\n                value={currentTemplate.replaceKey}\r\n                onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                required={true}\r\n                placeholder=\"\"\r\n              />\r\n            </div>\r\n            <div className=\"template--group\">\r\n              <label className=\"template--group-label\">\r\n                Tags *\r\n              </label>\r\n              <div className=\"flex-column\">\r\n                <TagPicker\r\n                  noResultsFoundText={\"No results found\"}\r\n                  areTagsEqual={(a: IStack, b: IStack) => {\r\n                    return a.id === b.id;\r\n                  }}\r\n                  convertItemToPill={(tag: IStack) => {\r\n                    return {\r\n                      content: tag.text\r\n                    };\r\n                  }}\r\n                  onSearchChanged={(searchValue: string) => {\r\n                    var items =\r\n                      StackValues.filter(item =>\r\n                        currentTemplate.tags.findIndex(d => d.id === item.id) === -1\r\n                      ).filter(\r\n                        testItem => testItem.text.toLowerCase().indexOf(searchValue.toLowerCase()) > -1\r\n                      )\r\n                    this.setState({ tagSuggestions: items });\r\n                  }}\r\n                  onTagAdded={(tag: IStack) => {\r\n                    currentTemplate.tags.push(tag);\r\n                    this.setState({\r\n                      currentTemplate: currentTemplate, tagSuggestions: StackValues.filter(item =>\r\n                        currentTemplate.tags.findIndex(d => d.id === item.id) === -1\r\n                      )\r\n                    });\r\n                  }}\r\n                  onTagRemoved={(tag: IStack) => {\r\n                    var items = currentTemplate.tags.filter(x => x.id !== tag.id)\r\n                    currentTemplate.tags = items;\r\n                    this.setState({\r\n                      currentTemplate: currentTemplate, tagSuggestions: StackValues.filter(item =>\r\n                        items.findIndex(d => d.id === item.id) === -1\r\n                      )\r\n                    });\r\n                  }}\r\n                  renderSuggestionItem={(tag: ISuggestionItemProps<IStack>) => {\r\n                    return <div className=\"body-m\">{tag.item.text}</div>;\r\n                  }}\r\n                  selectedTags={currentTemplate.tags}\r\n                  suggestions={tagSuggestions}\r\n                  suggestionsLoading={false}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"template--group\">\r\n              <Toggle\r\n                text={\"Requires authentication\"}\r\n                checked={showAuthentication}\r\n                onChange={(event, value) => {\r\n                  currentTemplate.user = \"\";\r\n                  currentTemplate.pass = \"\";\r\n                  this.setState({\r\n                    showAuthentication: value,\r\n                    currentTemplate: currentTemplate\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n            {showAuthentication && <>\r\n              <div className=\"template--group\">\r\n                <TextField\r\n                  inputId=\"user\"\r\n                  value={currentTemplate.user}\r\n                  onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                  placeholder=\"Username\"\r\n                />\r\n              </div>\r\n              <div className=\"template--group\">\r\n                <TextField\r\n                  inputId=\"pass\"\r\n                  value={currentTemplate.pass}\r\n                  onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                  inputType={\"password\"}\r\n                  required={true}\r\n                  placeholder=\"Password / PAT *\"\r\n                />\r\n              </div>\r\n            </>}\r\n\r\n            <div className=\"template--group template--add-button\">\r\n              {!currentTemplate.id &&\r\n                <Button\r\n                  text=\"Add\"\r\n                  primary={true}\r\n                  disabled={!this.isValid()}\r\n                  onClick={() => {\r\n                    currentTemplate.id = Guid.create().toString();\r\n                    template.push(currentTemplate);\r\n                    this.service.saveTemplate(currentTemplate);\r\n                    this.setState({\r\n                      showAuthentication: false,\r\n                      currentTemplate: this.getStartValue(),\r\n                      template: this.state.template.sortByProp(\"text\"),\r\n                      tagSuggestions: StackValues\r\n                    })\r\n                  }} />\r\n              }\r\n              {currentTemplate.id &&\r\n                <ButtonGroup className=\"template--add-button\">\r\n                  <Button\r\n                    text=\"Cancel\"\r\n                    subtle={true}\r\n                    onClick={() => {\r\n                      this.selection.clear()\r\n                      this.setState({\r\n                        showAuthentication: false,\r\n                        currentTemplate: this.getStartValue(),\r\n                        tagSuggestions: StackValues\r\n                      })\r\n                    }} />\r\n                  <Button\r\n                    text=\"Delete\"\r\n                    danger={true}\r\n                    onClick={() => {\r\n                      this.selection.clear();\r\n                      let items = template.filter(d => d.id !== currentTemplate.id);\r\n                      this.service.removeTemplate(currentTemplate.id);\r\n                      this.setState({\r\n                        showAuthentication: false,\r\n                        currentTemplate: this.getStartValue(),\r\n                        template: items.sortByProp(\"text\"),\r\n                        tagSuggestions: StackValues\r\n                      })\r\n                    }} />\r\n                  <Button\r\n                    text=\"Save\"\r\n                    primary={true}\r\n                    disabled={!this.isValid()}\r\n                    onClick={() => {\r\n                      this.selection.clear();\r\n                      let items = template.filter(d => d.id !== currentTemplate.id);\r\n                      this.service.saveTemplate(currentTemplate);\r\n                      items.push(currentTemplate);\r\n                      if (items.length > 0) {\r\n                        this.setState({\r\n                          showAuthentication: false,\r\n                          currentTemplate: this.getStartValue(),\r\n                          template: items.sortByProp(\"text\"),\r\n                          tagSuggestions: StackValues\r\n                        })\r\n                      }\r\n                    }} />\r\n                </ButtonGroup>\r\n              }\r\n            </div>\r\n\r\n            {template && template.length > 0 &&\r\n              <Card>\r\n                <div style={{ display: \"flex\" }}>\r\n\r\n                  <Observer itemProvider={new ObservableValue<ArrayItemProvider<ITemplate>>(new ArrayItemProvider(template))}>\r\n                    {(observableProps: { itemProvider: ArrayItemProvider<ITemplate> }) => (\r\n                      <ScrollableList\r\n                        width=\"100%\"\r\n                        itemProvider={observableProps.itemProvider}\r\n                        renderRow={this.renderRow}\r\n                        selection={this.selection}\r\n                        onSelect={(event: React.SyntheticEvent<HTMLElement>, listRow: IListRow<ITemplate>) => {\r\n                          var items = StackValues.filter(item =>\r\n                            listRow.data.tags.findIndex(d => d.id === item.id) === -1\r\n                          )\r\n                          this.setState({\r\n                            showAuthentication: listRow.data.pass !== \"\",\r\n                            currentTemplate: listRow.data.deepcopy(),\r\n                            tagSuggestions: items\r\n                          });\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </Observer>\r\n\r\n                </div>\r\n              </Card>\r\n            }\r\n          </div>\r\n\r\n        </Panel>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  renderRow = (\r\n    index: number,\r\n    item: ITemplate,\r\n    details: IListItemDetails<ITemplate>,\r\n    key?: string\r\n  ): JSX.Element => {\r\n    return (\r\n      <ListItem key={key || \"list-item\" + index} index={index} details={details}>\r\n        <div className=\"template--list-row flex-row h-scroll-hidden\">\r\n          <div\r\n            style={{ marginLeft: \"10px\", padding: \"10px 0px\" }}\r\n            className=\"flex-column h-scroll-hidden\">\r\n            <span className=\"text-ellipsis\">{item.text}</span>\r\n            <span className=\"fontSizeMS font-size-ms text-ellipsis secondary-text\">\r\n              {item.description}\r\n            </span>\r\n            <span className=\"fontSizeMS font-size-ms text-ellipsis secondary-text\">\r\n              {item.gitUrl}\r\n            </span>\r\n            <PillGroup className=\"flex-row\">\r\n              {item.tags.map(tag => (\r\n                <Pill size={PillSize.compact}>{tag.text}</Pill>\r\n              ))}\r\n            </PillGroup>\r\n          </div>\r\n        </div>\r\n      </ListItem>\r\n    );\r\n  };\r\n\r\n}\r\n\r\nexport default TemplatePanel;","import * as DevOps from \"azure-devops-extension-sdk\";\r\nimport { IHostNavigationService, IProjectPageService } from \"azure-devops-extension-api\";\r\n\r\nimport { getClient } from \"azure-devops-extension-api\";\r\nimport {\r\n  GitChange,\r\n  GitCommitRef,\r\n  GitItem,\r\n  GitPush,\r\n  GitRefUpdate,\r\n  GitRepository,\r\n  GitRepositoryCreateOptions,\r\n  GitRestClient,\r\n  ItemContent,\r\n  ItemContentType,\r\n  VersionControlChangeType,\r\n} from \"azure-devops-extension-api/Git\";\r\n\r\nconst client: GitRestClient = getClient(GitRestClient);\r\n\r\nexport interface RepoChange {\r\n  path: string;\r\n}\r\n\r\nexport async function CreateRepositoryAsync(\r\n  name: string\r\n): Promise<GitRepository> {\r\n  await DevOps.ready();\r\n  const projectService = await DevOps.getService<IProjectPageService>(\r\n    \"ms.vss-tfs-web.tfs-page-data-service\"\r\n  );\r\n  const currentProject = await projectService.getProject();\r\n\r\n  const options = {} as GitRepositoryCreateOptions;\r\n  options.name = name;\r\n\r\n  var repository = await client.createRepository(options, currentProject.name);\r\n\r\n  var gitRefUpdate = {} as GitRefUpdate;\r\n  gitRefUpdate.name = \"refs/heads/develop\";\r\n  gitRefUpdate.oldObjectId = \"0000000000000000000000000000000000000000\";\r\n\r\n  var item = {} as GitItem;\r\n  item.path = \"/README.md\";\r\n\r\n  var itemContent = {} as ItemContent;\r\n  itemContent.content = itemContent.content = \"### Made with Stack Board Extensions\";\r\n  itemContent.contentType = ItemContentType.RawText;\r\n\r\n  var change = {} as GitChange;\r\n  change.changeType = VersionControlChangeType.Add;\r\n  change.item = item;\r\n  change.newContent = itemContent;\r\n\r\n  var gitCommitRef = {} as GitCommitRef;\r\n  gitCommitRef.comment = \"Initial commit.\";\r\n  gitCommitRef.changes = [change];\r\n\r\n  var push = {} as GitPush;\r\n  push.refUpdates = [gitRefUpdate];\r\n  push.commits = [gitCommitRef];\r\n\r\n  await client.createPush(push, repository.id, currentProject.name);\r\n\r\n  return repository;\r\n}\r\n","import * as DevOps from \"azure-devops-extension-sdk\";\r\nimport { IProjectPageService } from \"azure-devops-extension-api\";\r\n\r\nimport { getClient } from \"azure-devops-extension-api\";\r\nimport {\r\n  AgentPoolQueue,\r\n  AgentSpecification,\r\n  Build,\r\n  BuildDefinition,\r\n  BuildDefinitionStep,\r\n  BuildDefinitionVariable,\r\n  BuildRepository,\r\n  BuildRestClient,\r\n  DefinitionType,\r\n  DesignerProcess,\r\n  DesignerProcessTarget,\r\n  Phase,\r\n  TaskAgentPoolReference,\r\n  TaskDefinitionReference,\r\n} from \"azure-devops-extension-api/Build\";\r\nimport { IBuildOptions } from \"../model/buildOptions\";\r\n\r\nconst client: BuildRestClient = getClient(BuildRestClient);\r\n\r\nexport interface PhaseTargetScript {\r\n  type: number;\r\n  allowScriptsAuthAccessOption: boolean;\r\n}\r\n\r\nexport async function CreateBuildDefinitionAsync(\r\n  options: IBuildOptions\r\n): Promise<BuildDefinition> {\r\n  await DevOps.ready();\r\n  const projectService = await DevOps.getService<IProjectPageService>(\r\n    \"ms.vss-tfs-web.tfs-page-data-service\"\r\n  );\r\n  const currentProject = await projectService.getProject();\r\n\r\n  const repository = {} as BuildRepository;\r\n  repository.type = \"TfsGit\";\r\n  repository.id = options.repositoryId;\r\n  repository.defaultBranch = \"refs/heads/develop\";\r\n\r\n  const agent = {} as AgentSpecification;\r\n  agent.identifier = \"ubuntu-20.04\";\r\n\r\n  const target = {} as DesignerProcessTarget;\r\n  target.agentSpecification = agent;\r\n\r\n  const phaseTarget = {} as PhaseTargetScript;\r\n  phaseTarget.type = 1;\r\n  phaseTarget.allowScriptsAuthAccessOption = true;\r\n\r\n  const task = {} as TaskDefinitionReference;\r\n  task.id = \"4c770a38-2b38-4144-aae5-32d81b7a5c0c\";\r\n  task.versionSpec = \"0.*\";\r\n  task.definitionType = \"task\";\r\n\r\n  const step = {} as BuildDefinitionStep;\r\n  step.task = task;\r\n  step.displayName = \"Stack Board Repos\";\r\n  step.enabled = true;\r\n  step.inputs = { sourceRepository: options.template.gitUrl };\r\n\r\n  const phase = {} as Phase;\r\n  phase.name = \"Agent job 1\";\r\n  phase.refName = \"Job_1\";\r\n  phase.condition = \"succeeded()\";\r\n  phase.jobAuthorizationScope = 1;\r\n  phase.target = phaseTarget;\r\n  phase.steps = [step];\r\n\r\n  const designerProcess = {} as DesignerProcess;\r\n  designerProcess.type = 1;\r\n  designerProcess.target = target;\r\n  designerProcess.phases = [phase];\r\n\r\n  const taskAgentPoolReference = {} as TaskAgentPoolReference;\r\n  taskAgentPoolReference.isHosted = true;\r\n  taskAgentPoolReference.name = \"Azure Pipelines\";\r\n\r\n  const agentPoolQueue = {} as AgentPoolQueue;\r\n  agentPoolQueue.pool = taskAgentPoolReference;\r\n  agentPoolQueue.name = \"Azure Pipelines\";\r\n\r\n  const definition = {} as BuildDefinition;\r\n  definition.name = `STACKBOARD-REPOS-${options.name.toUpperCase()}`;\r\n  definition.type = DefinitionType.Build;\r\n  definition.repository = repository;\r\n  definition.process = designerProcess;\r\n  definition.queue = agentPoolQueue;\r\n\r\n  const PAT = {} as BuildDefinitionVariable;\r\n  PAT.isSecret = true;\r\n  PAT.value = options.template.pass;\r\n\r\n  const userName = {} as BuildDefinitionVariable;\r\n  userName.isSecret = true;\r\n  userName.value = options.template.user;\r\n\r\n  definition.variables = { PAT: PAT, UserName: userName };\r\n\r\n  return await client.createDefinition(definition, currentProject.name);\r\n}\r\n\r\nexport async function RunBuild(buildDefinitionId: number): Promise<Build> {\r\n  await DevOps.ready();\r\n  const projectService = await DevOps.getService<IProjectPageService>(\r\n    \"ms.vss-tfs-web.tfs-page-data-service\"\r\n  );\r\n  const currentProject = await projectService.getProject();\r\n\r\n  const build = {} as Build;\r\n  build.definition = await client.getDefinition(\r\n    currentProject.name,\r\n    buildDefinitionId\r\n  );\r\n\r\n  if (build.definition) {\r\n    return await client.queueBuild(build, currentProject.name);\r\n  }\r\n\r\n  throw new Error(`Can't find build definition with id - ${buildDefinitionId}`);\r\n}\r\n","import { IStatusProps } from \"azure-devops-ui/Status\";\nimport { ITemplate } from \"./template\";\n\nexport interface IProject {\n    id: string;\n    name: string;\n    repoName: string;\n    status: string;\n    template?: ITemplate;\n\n    repoUrl?: string;\n    buildDefinitionId?: number;\n    startTime?: Date;\n    endTime?: Date;\n}\n\nexport interface IStatusIndicator {\n    statusProps: IStatusProps;\n    label: string;\n}\n\nexport enum ProjectStatus {\n    Running = \"running\",\n    Succeeded = \"succeeded\",\n    Failed = \"failed\",\n    Warning = \"warning\",\n}","import React from 'react';\r\nimport './project-panel.scss';\r\n\r\nimport { Panel } from \"azure-devops-ui/Panel\";\r\nimport { TextField } from \"azure-devops-ui/TextField\";\r\nimport { Dropdown } from \"azure-devops-ui/Dropdown\";\r\n\r\nimport { CreateRepositoryAsync } from '../../services/repository';\r\nimport { CreateBuildDefinitionAsync } from '../../services/build';\r\nimport { ITemplate } from '../../model/template';\r\nimport { IProject } from '../../model/project';\r\nimport { IListBoxItem } from 'azure-devops-ui/ListBox';\r\nimport { Guid } from 'guid-typescript';\r\nimport { Services } from '../../services/services';\r\nimport { IProjectService, ProjectServiceId } from '../../services/project';\r\nimport { IBuildOptions } from '../../model/buildOptions';\r\n\r\nexport interface IProjectPanelProps {\r\n  show: boolean;\r\n  onDismiss: any;\r\n  template: ITemplate[];\r\n}\r\n\r\ninterface IProjectPanelState {\r\n  currentProject: IProject;\r\n}\r\n\r\nclass ProjectPanel extends React.Component<IProjectPanelProps, IProjectPanelState>  {\r\n\r\n  service = Services.getService<IProjectService>(\r\n    ProjectServiceId\r\n  );\r\n\r\n  constructor(props: IProjectPanelProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentProject: {\r\n        id        : \"\",\r\n        name      : \"\",\r\n        repoName  : \"\",\r\n        status    : \"running\",\r\n      }\r\n    };\r\n  }\r\n\r\n  onInputChange(event: React.ChangeEvent, value: string, that: this) {\r\n    var prop = event.target.id.replace(\"__bolt-\", \"\");\r\n    that.state.currentProject[prop] = value;\r\n    this.setState({\r\n      currentProject: that.state.currentProject\r\n    });\r\n  }\r\n\r\n  isValid(): boolean {\r\n    const { currentProject } = this.state;\r\n\r\n    return (\r\n      !!currentProject.name     && currentProject.name.trim()         !== \"\" &&\r\n      !!currentProject.template && currentProject.template.id.trim()  !== \"\" &&      \r\n      !!currentProject.repoName && currentProject.repoName.trim()     !== \"\"\r\n    );\r\n  }\r\n\r\n  async createNewProject(that: this) {\r\n\r\n    var item = that.state.currentProject;\r\n    var repository = await CreateRepositoryAsync(item.repoName);\r\n\r\n    const buildOptions: IBuildOptions = {\r\n      name          : item.name,\r\n      repositoryId  : repository.id,\r\n      template      : item.template\r\n    };\r\n\r\n    var buildDef = await CreateBuildDefinitionAsync(buildOptions);\r\n    \r\n    item.id                 = Guid.create().toString();\r\n    item.repoUrl            = repository.webUrl;\r\n    item.buildDefinitionId  = buildDef.id;\r\n    item.startTime          = new Date();\r\n\r\n    that.service.saveProject(item).then(item => {\r\n      that.props.onDismiss();\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const { currentProject } = this.state;\r\n\r\n    if (this.props.show) {\r\n      return (\r\n        <Panel\r\n          onDismiss={this.props.onDismiss}\r\n          titleProps={{ text: \"Create new project\" }}\r\n          description={\"Create new project from a template.\"}\r\n          footerButtonProps={[\r\n            { text: \"Cancel\", onClick: this.props.onDismiss},\r\n            { text: \"Create\", \r\n              primary: true, \r\n              onClick: (event) => {\r\n                this.createNewProject(this)\r\n              }, \r\n              disabled: !this.isValid()\r\n            }\r\n          ]}>\r\n\r\n          <div className=\"project--content\">\r\n            <div className=\"project--group\">\r\n              <TextField\r\n                inputId=\"name\"\r\n                label=\"Name *\"\r\n                value={currentProject.name}\r\n                placeholder=\"Name your project name\"\r\n                onChange={(event, value) => this.onInputChange(event, value, this)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"project--group\">\r\n              <Dropdown\r\n                ariaLabel=\"Basic\"\r\n                className=\"example-dropdown\"\r\n                placeholder=\"Select a template\"\r\n                items={this.props.template}\r\n                onSelect={(event, item) => {\r\n                  currentProject.template = item as ITemplate;\r\n                  this.setState({ currentProject: currentProject });\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"project--group\">\r\n              <label className=\"project--group-label\">\r\n                Repository name *\r\n              </label>\r\n              <div className=\"project--group\">\r\n                <TextField\r\n                  inputId=\"repoName\"\r\n                  value={currentProject.repoName}\r\n                  placeholder=\"Company.Service.Name\"\r\n                  onChange={(event, value) => this.onInputChange(event, value, this)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </Panel>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default ProjectPanel;\r\n","import { Status, Statuses, StatusSize } from 'azure-devops-ui/Status';\r\nimport { ITableColumn, SimpleTableCell } from 'azure-devops-ui/Table';\r\nimport { Tooltip } from 'azure-devops-ui/TooltipEx';\r\nimport { IProject, IStatusIndicator, ProjectStatus } from '../../model/project';\r\n\r\n\r\n\r\nexport const projectsMock : IProject[] = [\r\n  {\r\n      \"id\": \"dd685ebc-19ee-5517-1b3f-329178b21137\",\r\n      \"name\": \"Push2\",\r\n      \"repoName\": \"Eleve.Service.Push2\",\r\n      \"status\": \"running\",\r\n      \"template\": {\r\n          \"id\": \"b7a9ce66-96d3-2e69-61c3-80cf54a7eabe\",\r\n          \"replaceKey\": \"AppName\",\r\n          \"text\": \"React App\",\r\n          \"description\": \"um has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to m\",\r\n          \"gitUrl\": \"https://dev.azure.com/elevenfinancial/Tribe%20-%20PeD/_git/Eleven.Libs.Foundation\",\r\n          \"user\": \"\",\r\n          \"pass\": \"\",\r\n          \"tags\": [\r\n              {\r\n                  \"id\": 3,\r\n                  \"text\": \"React\"\r\n              },\r\n              {\r\n                  \"id\": 1,\r\n                  \"text\": \"C#\"\r\n              }\r\n          ],\r\n      },\r\n      \"repoUrl\": \"https://dev.azure.com/elevenfinancial/Tribe%20-%20PeD/_git/Eleve.Service.Push2\",\r\n      \"buildDefinitionId\": 57,\r\n      \"startTime\": new Date(),\r\n  },\r\n  {\r\n      \"id\": \"f121ae71-e50d-db4b-20f4-5b9bd13dfd99\",\r\n      \"name\": \"Push3\",\r\n      \"repoName\": \"Eleve.Service.Push3\",\r\n      \"status\": \"running\",\r\n      \"template\": {\r\n          \"id\": \"e219db83-30e1-3bec-88bd-b58d13ef842d\",\r\n          \"replaceKey\": \"ServiceName\",\r\n          \"text\": \"Microservice\",\r\n          \"description\": \"um has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to m\",\r\n          \"gitUrl\": \"https://dev.azure.com/elevenfinancial/Tribe%20-%20PeD/_git/Eleven.Libs.Foundation\",\r\n          \"user\": \"\",\r\n          \"pass\": \"\",\r\n          \"tags\": [\r\n              {\r\n                  \"id\": 1,\r\n                  \"text\": \"C#\"\r\n              }\r\n          ],\r\n      },\r\n      \"repoUrl\": \"https://dev.azure.com/elevenfinancial/Tribe%20-%20PeD/_git/Eleve.Service.Push3\",\r\n      \"buildDefinitionId\": 58,\r\n      \"startTime\": new Date(),\r\n  }\r\n];\r\n\r\n\r\n\r\nexport function getStatusIndicator(status: string): IStatusIndicator {\r\n  status = status || \"\";\r\n  status = status.toLowerCase();\r\n  const indicatorData: IStatusIndicator = {\r\n    label: \"Success\",\r\n    statusProps: { ...Statuses.Success, ariaLabel: \"Success\" },\r\n  };\r\n  switch (status) {\r\n    case ProjectStatus.Failed:\r\n      indicatorData.statusProps = { ...Statuses.Failed, ariaLabel: \"Failed\" };\r\n      indicatorData.label = \"Failed\";\r\n      break;\r\n    case ProjectStatus.Running:\r\n      indicatorData.statusProps = { ...Statuses.Running, ariaLabel: \"Running\" };\r\n      indicatorData.label = \"Running\";\r\n      break;\r\n    case ProjectStatus.Warning:\r\n      indicatorData.statusProps = { ...Statuses.Warning, ariaLabel: \"Warning\" };\r\n      indicatorData.label = \"Warning\";\r\n\r\n      break;\r\n  }\r\n\r\n  return indicatorData;\r\n}\r\n\r\nexport function renderNameColumn(\r\n  rowIndex: number,\r\n  columnIndex: number,\r\n  tableColumn: ITableColumn<IProject>,\r\n  tableItem: IProject\r\n): JSX.Element {\r\n  return (\r\n    <SimpleTableCell\r\n      columnIndex={columnIndex}\r\n      tableColumn={tableColumn}\r\n      key={\"col-\" + columnIndex}\r\n      contentClassName=\"fontWeightSemiBold font-weight-semibold fontSizeM font-size-m scroll-hidden\"\r\n    >\r\n      <Status\r\n        {...this.getStatusIndicator(tableItem.status).statusProps}\r\n        className=\"icon-large-margin\"\r\n        size={StatusSize.l}\r\n      />\r\n      <div className=\"flex-row scroll-hidden\">\r\n        <Tooltip overflowOnly={true}>\r\n          <span className=\"text-ellipsis\">{tableItem.name}</span>\r\n        </Tooltip>\r\n      </div>\r\n    </SimpleTableCell>\r\n  );\r\n}","import React from 'react';\r\nimport './projects-page.scss';\r\n\r\nimport {\r\n  CustomHeader,\r\n  HeaderDescription,\r\n  HeaderTitle,\r\n  HeaderTitleArea,\r\n  HeaderTitleRow,\r\n  TitleSize\r\n} from \"azure-devops-ui/Header\";\r\n\r\nimport { Card } from \"azure-devops-ui/Card\";\r\nimport { Page } from \"azure-devops-ui/Page\";\r\nimport { Button } from \"azure-devops-ui/Button\";\r\nimport { ButtonGroup } from \"azure-devops-ui/ButtonGroup\";\r\nimport TemplatePanel from '../../components/template/template-panel';\r\n\r\nimport {\r\n  ColumnMore,\r\n  ITableColumn,\r\n  Table,\r\n  ColumnSorting,\r\n  SortOrder,\r\n  sortItems,\r\n} from \"azure-devops-ui/Table\";\r\n\r\nimport { ArrayItemProvider } from \"azure-devops-ui/Utilities/Provider\";\r\nimport { ObservableValue } from \"azure-devops-ui/Core/Observable\";\r\nimport { Observer } from \"azure-devops-ui/Observer\";\r\nimport { Services } from '../../services/services';\r\nimport { ITemplateService, TemplateServiceId, } from '../../services/template';\r\nimport { ITemplate } from '../../model/template';\r\nimport { IProjectService, ProjectServiceId } from '../../services/project';\r\nimport { IProject } from '../../model/project';\r\n\r\nimport { ZeroData, ZeroDataActionType } from \"azure-devops-ui/ZeroData\";\r\nimport ProjectPanel from '../../components/project/project-panel';\r\nimport { projectsMock, renderNameColumn } from './projectsTable';\r\n\r\n\r\ninterface IProjectsState {\r\n  templateExpanded: boolean;\r\n  projectExpanded: boolean;\r\n  template: ITemplate[];\r\n  projects: IProject[];\r\n}\r\n\r\nclass ProjectsPage extends React.Component<{}, IProjectsState>  {\r\n\r\n  templateService = Services.getService<ITemplateService>(TemplateServiceId);\r\n  projectService = Services.getService<IProjectService>(ProjectServiceId);\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      templateExpanded: false,\r\n      projectExpanded: false,\r\n      template: [],\r\n      projects: projectsMock\r\n    };    \r\n\r\n    this.loadTemplate();\r\n    this.loadProjects();\r\n  }\r\n\r\n  loadTemplate() {\r\n    this.templateService.getTemplate().then(items => {\r\n      this.setState({ template: items });\r\n    });\r\n  }\r\n  loadProjects() {\r\n    this.projectService.getProject().then(items => {\r\n      this.setState({ projects: items });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { projects } = this.state;\r\n\r\n    return (\r\n      <Page className=\"flex-grow\">\r\n        <CustomHeader className=\"bolt-header-with-commandbar\">\r\n          <HeaderTitleArea>\r\n            <HeaderTitleRow>\r\n              <HeaderTitle className=\"text-ellipsis\" titleSize={TitleSize.Large}>\r\n                Projects\r\n              </HeaderTitle>\r\n            </HeaderTitleRow>\r\n            <HeaderDescription>\r\n              Projects list generated from templates\r\n            </HeaderDescription>\r\n          </HeaderTitleArea>\r\n          <ButtonGroup>\r\n            <Button text=\"Create\" iconProps={{ iconName: \"Add\" }} primary={true}\r\n              onClick={() => this.setState({ projectExpanded: true })}\r\n            />\r\n            <Button ariaLabel=\"Settings\" iconProps={{ iconName: \"Settings\" }}\r\n              onClick={() => this.setState({ templateExpanded: true })}\r\n            />\r\n          </ButtonGroup>\r\n        </CustomHeader>\r\n\r\n        <div className=\"page-content page-content-top\">\r\n           {projects.length == 0 && <ZeroData\r\n            primaryText=\"Get started your first project\"\r\n            secondaryText={\r\n              <span>\r\n                Save time by creating a new project from templates.\r\n              </span>\r\n            }\r\n            imageAltText=\"Bars\"\r\n            imagePath={\"https://cdn.vsassets.io/ext/ms.vss-code-web/import-content/repoNotFound.bVoHtlP2mhhyPo5t.svg\"}\r\n            actionText=\"Create\"\r\n            actionType={ZeroDataActionType.ctaButton}\r\n            onActionClick={(event, item) =>\r\n              this.setState({ projectExpanded: true })\r\n            } />\r\n          } \r\n\r\n          {projects.length > 0 && <Card\r\n            className=\"flex-grow bolt-table-card\"\r\n            contentProps={{ contentPadding: false }}\r\n            titleProps={{ text: \"All projects\" }}\r\n          >\r\n            <Observer itemProvider={this.itemProvider}>\r\n              {(observableProps: { itemProvider: ArrayItemProvider<IProject> }) => (\r\n                <Table\r\n                  ariaLabel=\"Projects table\"\r\n                  behaviors={[this.sortingBehavior]}\r\n                  columns={this.columns}\r\n                  containerClassName=\"h-scroll-auto\"\r\n                  itemProvider={observableProps.itemProvider}\r\n                  showLines={true}\r\n                  onSelect={(event, data) => console.log(\"Selected Row - \" + data.index)}\r\n                  onActivate={(event, row) => console.log(\"Activated Row - \" + row.index)}\r\n                />\r\n              )} \r\n            </Observer>\r\n          </Card>} \r\n\r\n        </div>\r\n\r\n        <TemplatePanel show={this.state.templateExpanded} onDismiss={() => { this.setState({ templateExpanded: false }); this.loadTemplate() }} />\r\n        <ProjectPanel template={this.state.template} show={this.state.projectExpanded} onDismiss={() => { this.setState({ projectExpanded: false }); this.loadTemplate() }} />\r\n\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  columns: ITableColumn<IProject>[] = [\r\n    {\r\n      id: \"name\",\r\n      name: \"Projects\",\r\n      renderCell: renderNameColumn,\r\n      readonly: true,\r\n      sortProps: {\r\n        ariaLabelAscending: \"Sorted A to Z\",\r\n        ariaLabelDescending: \"Sorted Z to A\",\r\n      },\r\n      width: -33,\r\n    },\r\n\r\n    new ColumnMore(() => {\r\n      return {\r\n        id: \"sub-menu\",\r\n        items: [\r\n          { id: \"download\", text: \"Download\" },\r\n          { id: \"delete\", text: \"Delete\" },\r\n        ],\r\n      };\r\n    }),\r\n  ];\r\n\r\n  itemProvider = new ObservableValue<ArrayItemProvider<IProject>>(\r\n    new ArrayItemProvider(this.state ? this.state.projects : [])\r\n  );\r\n\r\n  sortingBehavior = new ColumnSorting<Partial<IProject>>(\r\n    (columnIndex: number, proposedSortOrder: SortOrder) => {\r\n      this.itemProvider.value = new ArrayItemProvider(\r\n        sortItems(\r\n          columnIndex,\r\n          proposedSortOrder,\r\n          [\r\n            (item1: IProject, item2: IProject) => {\r\n              return item1.name.localeCompare(item2.name);\r\n            }\r\n          ],\r\n          this.columns,\r\n          this.state ? this.state.projects : []\r\n        )\r\n      );\r\n    }\r\n  );\r\n}\r\n\r\nexport default ProjectsPage;\r\n","import React from 'react';\r\nimport * as DevOps from \"azure-devops-extension-sdk\";\r\nimport { IHostNavigationService } from 'azure-devops-extension-api/Common/CommonServices';\r\nimport ProjectPage from './pages/project/projects-page';\r\nimport Radar from './pages/radar/radar';\r\nimport { Surface, SurfaceBackground } from 'azure-devops-ui/Surface';\r\n\r\ninterface IAppState {\r\n  page: string;\r\n}\r\n\r\nclass App extends React.Component<{}, IAppState>  {\r\n\r\n  projectService = DevOps.getService<IHostNavigationService>(\r\n    \"ms.vss-features.host-navigation-service\"\r\n  );\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    DevOps.init();\r\n\r\n    this.state = {\r\n      page: \"\",\r\n    };\r\n\r\n    this.projectService.then(item => {\r\n      item.getPageRoute().then(route => {\r\n        this.setState({ page: route.routeValues[\"parameters\"] });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Surface background={SurfaceBackground.neutral}>\r\n        <ProjectPage />\r\n      </Surface>\r\n    );\r\n\r\n    const { page } = this.state;\r\n\r\n    switch (page) {\r\n      case \"elevenlabs.stack-board.stack-board-hub\":\r\n        return (<ProjectPage />);\r\n      case \"elevenlabs.stack-board.tech-radar-hub\":\r\n        return (<Radar />);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './radar.scss';\r\n\r\nimport {\r\n  CustomHeader,\r\n  HeaderTitle,\r\n  HeaderTitleArea,\r\n  HeaderTitleRow,\r\n  TitleSize\r\n} from \"azure-devops-ui/Header\";\r\n\r\nimport { Button } from 'azure-devops-ui/Button';\r\nimport { ButtonGroup } from 'azure-devops-ui/ButtonGroup';\r\nimport { Page } from 'azure-devops-ui/Page';\r\n\r\ninterface IRadarState {\r\n}\r\n\r\nclass Radar extends React.Component<{}, IRadarState>  {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Page>\r\n        <CustomHeader className=\"bolt-header-with-commandbar\">\r\n          <HeaderTitleArea>\r\n            <HeaderTitleRow>\r\n              <HeaderTitle className=\"text-ellipsis\" titleSize={TitleSize.Large}>\r\n                Tech Radar\r\n              </HeaderTitle>\r\n            </HeaderTitleRow>\r\n          </HeaderTitleArea>\r\n          <ButtonGroup>\r\n            <Button text=\"Create\" iconProps={{ iconName: \"Add\" }} primary={true}\r\n              onClick={() => this.setState({ templateExpanded: true })}\r\n            />\r\n            <Button ariaLabel=\"Add\" iconProps={{ iconName: \"Settings\" }}\r\n              onClick={() => this.setState({ settingsExpanded: true })}\r\n            />\r\n          </ButtonGroup>\r\n        </CustomHeader>\r\n\r\n        <div className=\"page-content page-content-top\">\r\n\r\n        \r\n        </div>\r\n\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radar;\r\n","import ReactDOM from 'react-dom';\r\nimport \"./services/registration\";\r\nimport \"./utils/extensions.ts\";\r\n\r\nimport { SurfaceBackground, SurfaceContext } from \"azure-devops-ui/Surface\";\r\nimport App from './app';\r\n\r\nReactDOM.render(\r\n  <SurfaceContext.Provider value={{ background: SurfaceBackground.neutral }}>\r\n    <App />\r\n  </SurfaceContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}